

service: rpt-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1


  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "glue:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "athena:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - dynamodb:*
          Resource: "*"

custom:
  S3Prefix: "destination-parquet/"
  S3BatchResultsPrefix: "transformed-parquet-athena/"
  stage: ${opt:stage, self:provider.stage}
  AthenaWorkGroup: "primary"
  Database: "txn_database"
  DataCatalog: "AwsDataCatalog"
  CrawlerName: "txn_crawler"
  # TableName:  "txns_table"
  JobName: "my_glue_job"
  pythonRequirements:
    dockerizePip: non-linux

plugins:
  - serverless-iam-roles-per-function
  # - serverless-python-requirements



package:
  exclude:
    - node_modules/**
    - .serverless/**
    - superset/**
  include:
    - functions/handler.py

functions:
  slsEtl:
    handler: functions/handler.slsEtl
    events:
      - eventBridge:
          schedule: rate(1 minute)
    environment:
      DB: ${self:custom.Database}
      CATALOG: ${self:custom.DataCatalog}
      WORKGROUP: ${self:custom.AthenaWorkGroup}
      OUTPUT: "s3://n-ftdc-target-bucket/athena-results/temp"
      CRAWLER: ${self:custom.CrawlerName}
      TABLE_NAME: runOnceTable
      # TABLE: ${self:custom.TableName}
      JOB_NAME: ${self:custom.JobName}
    timeout: 300
    iamRoleStatementsName: ${self:service}-${opt:stage, self:provider.stage}-slsEtl-lambdaRole
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - athena:*
        Resource: "*"
      - Effect: "Allow"
        Action:
          - s3:*
        Resource: "*"
      - Effect: "Allow"
        Action:
          - glue:*
        Resource: "*"
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: "*"


resources:
  - ${file(resources/batch-process.yml)}

